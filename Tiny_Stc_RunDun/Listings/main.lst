C51 COMPILER V9.60.7.0   MAIN                                                              05/22/2025 09:16:15 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Program Files\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND P
                    -RINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <STC8G.H>
   2          
   3          #include <stdio.h>
   4          
   5          #include <math.h>
   6          #include "ssd1306xled.h"
   7          
   8          const uint8_t code  playerIdle1 []  =  { // inverted, bottom first
   9          B00111100,
  10          B11011011,
  11          B11000010,
  12          B11011011,
  13          B00111100
  14          };
  15          const uint8_t code  playerIdle2 []  =  {
  16          B00111011,
  17          B11010111,
  18          B11000101,
  19          B11010111,
  20          B00111011
  21          };
  22          const uint8_t code  playerRight1 []  =  {
  23          B11110111,
  24          B01111011,
  25          B10011011,
  26          B00000010,
  27          B01101111
  28          };
  29          const uint8_t code  playerRight2 []  =  {
  30          B00111111,
  31          B11010011,
  32          B11100010,
  33          B00011011,
  34          B11111111
  35          };
  36          const uint8_t code  playerLeft1 []  =  {
  37          B01101111,
  38          B00000010,
  39          B10011011,
  40          B01111011,
  41          B11110111
  42          };
  43          const uint8_t code  playerLeft2 []  =  {
  44          B11111111,
  45          B00011011,
  46          B11100010,
  47          B11010011,
  48          B00111111
  49          };
  50          const uint8_t code  bomb1 []  =  {
  51          B11111111,
  52          B10001111,
  53          B01111111,
  54          B00011111,
C51 COMPILER V9.60.7.0   MAIN                                                              05/22/2025 09:16:15 PAGE 2   

  55          B01111111,
  56          B10001111,
  57          B11111111,
  58          B11000111,
  59          B10111001,
  60          B01111110,
  61          B01111100,
  62          B00010000,
  63          B10000001,
  64          B11000111
  65          };
  66          
  67          const uint8_t code  bottle1 []  =  {
  68          B11111111,
  69          B11101111,
  70          B00001011,
  71          B00000011,
  72          B11101111,
  73          B11111111,
  74          B10000001,
  75          B01011010,
  76          B01011011,
  77          B00011000,
  78          B00011000,
  79          B10000001
  80          };
  81          
  82          const uint8_t code  splash  []  =  {
  83          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
  84          0x3E, 0xFE, 0xE2, 0xC2, 0xFE, 0x80, 0x00, 0x00, 0x00, 0xC0, 0x80, 0x00, 0x00, 0xC0, 0xC0, 0x80,
  85          0x00, 0x20, 0x70, 0xC0, 0xE0, 0x30, 0x70, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  86          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  87          0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  88          0x00, 0x00, 0xC0, 0xC0, 0xC0, 0x60, 0x1E, 0xFE, 0xF0, 0xF8, 0xF7, 0xFB, 0xFC, 0xF8, 0xF8, 0xFE,
  89          0xFD, 0xFC, 0xF7, 0xFC, 0xFC, 0xFE, 0xFD, 0xFF, 0xFC, 0xFC, 0xF4, 0xFC, 0xF4, 0xFE, 0xFE, 0xFE,
  90          0xDC, 0xF8, 0xFF, 0xFF, 0xF8, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  91          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  92          0x00, 0x01, 0x07, 0xEF, 0xE0, 0x61, 0x61, 0x73, 0x76, 0x70, 0x73, 0x77, 0xF6, 0xE6, 0xE7, 0xE3,
  93          0xE6, 0xC0, 0xC0, 0x01, 0xC3, 0xB3, 0xE0, 0x81, 0x03, 0x03, 0x00, 0x00, 0x10, 0xF8, 0xF0, 0xE0,
  94          0x84, 0x1C, 0x7C, 0xFC, 0xFE, 0xC6, 0x06, 0x0E, 0x0A, 0x1C, 0x74, 0x68, 0xB0, 0xE0, 0x86, 0x7F,
  95          0xFB, 0xF3, 0xB3, 0x33, 0x1B, 0x1A, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  96          0x83, 0x00, 0xFF, 0x3F, 0xFF, 0xFF, 0x7E, 0x3F, 0x0F, 0x07, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00,
  97          0x00, 0x04, 0x04, 0x04, 0x84, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x1F, 0x1F, 0x1E, 0x7B, 0x7F,
  98          0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x10, 0x06, 0x0C, 0x00, 0x00, 0x00, 0x00,
  99          0x00, 0x00, 0x60, 0xE0, 0xA0, 0x60, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFC, 0xF8,
 100          0x00, 0x0E, 0x3C, 0x7F, 0xFC, 0xF0, 0xE0, 0x90, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
 101          0x03, 0x0F, 0xFF, 0xFF, 0xFC, 0x71, 0x07, 0x0F, 0x3F, 0xFC, 0xF0, 0xE0, 0x80, 0xE0, 0x3F, 0x01,
 102          0x03, 0x0F, 0x3C, 0xF8, 0x63, 0x4F, 0x1E, 0x7C, 0xE0, 0xC0, 0xE0, 0x60, 0x3F, 0x1E, 0x0F, 0x00,
 103          0x01, 0x07, 0x07, 0x0F, 0x0E, 0x0C, 0x1C, 0x1A, 0x1A, 0x0E, 0x84, 0x00, 0x00, 0x00, 0x20, 0xFF,
 104          0xFF, 0xFE, 0x7F, 0x3F, 0x1F, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80,
 105          0x80, 0xC0, 0xC0, 0xC0, 0x80, 0xC1, 0xC1, 0x81, 0x81, 0x03, 0x01, 0x02, 0x02, 0x06, 0x0C, 0x0C,
 106          0x08, 0x00, 0x01, 0x10, 0x90, 0xA0, 0xBF, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x7C, 0x08, 0x00, 0x00,
 107          0x80, 0x80, 0x00, 0x03, 0x0F, 0x3E, 0x7E, 0xF3, 0xC3, 0x86, 0x0C, 0xB8, 0xE0, 0xFF, 0x81, 0xFF,
 108          0x80, 0x80, 0x80, 0x80, 0x81, 0x03, 0x0F, 0x3F, 0x7B, 0xFC, 0xF8, 0xF0, 0xF0, 0xF8, 0x78, 0x7C,
 109          0x36, 0x1F, 0x0D, 0x07, 0x00, 0xE0, 0xF0, 0xF0, 0xF0, 0x30, 0x71, 0x63, 0xC1, 0x00, 0x00, 0x00,
 110          0x00, 0x00, 0xC0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0xE0, 0xF0, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x3C,
 111          0xF8, 0xF8, 0x70, 0xE0, 0xC0, 0x80, 0x06, 0xFE, 0xFE, 0x00, 0x07, 0x3C, 0xE0, 0x00, 0x00, 0x1F,
 112          0x07, 0x00, 0xE0, 0xEC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01,
 113          0x03, 0x03, 0x0F, 0x3F, 0x3B, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x1F, 0x07, 0x07, 0x0E, 0xFE, 0xFE,
 114          0xFF, 0xFF, 0xBF, 0xFC, 0xFC, 0xF8, 0xF0, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
 115          0x0F, 0x1F, 0x3F, 0x3E, 0x3E, 0x5E, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
 116          0xF3, 0x83, 0x03, 0x03, 0x03, 0x03, 0x83, 0xC3, 0x36, 0x1C, 0x9F, 0xBB, 0xB1, 0xE0, 0xC0, 0xE0,
C51 COMPILER V9.60.7.0   MAIN                                                              05/22/2025 09:16:15 PAGE 3   

 117          0x20, 0x20, 0x20, 0x40, 0x40, 0x63, 0x27, 0xFF, 0xBF, 0xFC, 0xE0, 0xFC, 0x3F, 0x3F, 0x30, 0x70,
 118          0x70, 0x70, 0xE1, 0xE3, 0xE7, 0x5E, 0x7C, 0x70, 0x60, 0x3F, 0x1F, 0x07, 0x0F, 0x1F, 0x1C, 0x38,
 119          0x01, 0x1F, 0x3F, 0x3C, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x04, 0x00, 0x00, 0x0D, 0x0C, 0x84, 0xA0,
 120          0xFC, 0xFF, 0xFF, 0xFF, 0xFA, 0xE0, 0xE0, 0xC0, 0xE0, 0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC,
 121          0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xF1, 0xF3, 0xE2, 0xE0, 0xC0, 0xC0, 0xE0, 0xE0, 0xC1, 0xF9,
 122          0xF3, 0xE3, 0xC3, 0x83, 0x83, 0x03, 0x07, 0xFC, 0x00, 0x00, 0x10, 0x30, 0x38, 0x04, 0x04, 0x0C,
 123          0x42, 0x46, 0x84, 0xCC, 0x7E, 0x26, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0xBF, 0x3D,
 124          0x7F, 0xFD, 0x13, 0xDE, 0x9C, 0x0E, 0x09, 0x1C, 0x06, 0xC3, 0xF1, 0x50, 0xDC, 0x04, 0x05, 0x07,
 125          0x0F, 0x5E, 0xF8, 0xF0, 0xF0, 0x90, 0x20, 0x60, 0xC3, 0x86, 0x8F, 0x6F, 0x39, 0x0C, 0x06, 0x0E,
 126          0x08, 0x04, 0xC4, 0x7C, 0xF0, 0x8C, 0x04, 0x00, 0x00, 0x00, 0x38, 0x2E, 0x76, 0xF8, 0xD8, 0xF8,
 127          0xCC, 0xE4, 0x64, 0x24, 0x00, 0x18, 0x1C, 0x0E, 0x06, 0x02, 0x00, 0x03, 0x01, 0xC0, 0xFB, 0xFF,
 128          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x8F, 0xCF,
 129          0xE7, 0xE7, 0xF7, 0xF3, 0xF3, 0xF3, 0xF3, 0xC3, 0xE7, 0xC7, 0x87, 0x8F, 0x0F, 0x1F, 0x7F, 0xFF,
 130          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x18, 0x0F, 0x80, 0xC4, 0x88, 0x00, 0x30, 0x30, 0x70, 0xE0,
 131          0x28, 0x2C, 0x27, 0x21, 0x23, 0x45, 0x49, 0x73, 0x03, 0xF7, 0xEF, 0xE8, 0x63, 0x9F, 0xDF, 0x9F,
 132          0x7E, 0x7D, 0x3C, 0xCF, 0xF3, 0xF9, 0xF2, 0xC7, 0xC7, 0xCF, 0xC4, 0x82, 0x8F, 0xEF, 0xB2, 0xF3,
 133          0x73, 0xC9, 0xDB, 0x4F, 0x5F, 0x7D, 0xDF, 0xC2, 0xC3, 0xF3, 0x7F, 0xFF, 0xFF, 0xFF, 0xFC, 0xBE,
 134          0x2A, 0x37, 0x9C, 0x8E, 0x1B, 0x19, 0x59, 0xB3, 0xFC, 0xDD, 0x5A, 0xEE, 0xE7, 0x6B, 0x15, 0x91,
 135          0x80, 0xC1, 0xC3, 0xC0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8F, 0xFF,
 136          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xE2, 0xEF, 0xCF, 0x8F,
 137          0x8F, 0x0F, 0x07, 0x3F, 0x3F, 0x3F, 0xFF, 0x7F, 0x07, 0xF3, 0xF9, 0xFC, 0xFE, 0xFE, 0xFF, 0xFF,
 138          0xFF, 0xFF, 0x7F, 0xF7, 0xF3, 0xE1, 0xF0, 0xD8, 0xD8, 0xFC, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0x7F,
 139          0x18, 0x2F, 0x6D, 0xE1, 0x3E, 0x01, 0x81, 0xD9, 0xF3, 0xE3, 0xE1, 0xE4, 0xE6, 0xEB, 0xFF, 0xFF,
 140          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x67, 0xE7, 0x8F, 0x9F, 0xE7, 0xF9, 0xFC, 0xFD, 0xFF, 0xFC,
 141          0xF9, 0xF2, 0xF3, 0xFC, 0xFC, 0xFE, 0x7E, 0x7E, 0xFF, 0xFF, 0xF8, 0xF3, 0xFA, 0xF8, 0xFC, 0xF8,
 142          0xFD, 0xF1, 0xC6, 0xCE, 0x0E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFA, 0xF9, 0xF9,
 143          0xFE, 0xBD, 0x7B, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7E, 0x7E, 0xFC, 0xFE, 0xFE, 0xFF, 0xFF,
 144          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 145          0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xFC, 0xFF, 0x7F, 0x3F, 0x1F, 0x1F, 0x1F, 0x1F,
 146          0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xF7, 0xE7, 0xE3, 0xFF, 0xFF, 0xFF, 0xFD, 0xFC, 0x6C
 147          };
 148          
 149          unsigned long activeMillis = 0;
 150          byte bombX[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 151          byte bombY[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 152          byte bombStatus[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 153          byte totalBombs = 1;
 154          byte maxBombs = 16;
 155          byte playerOffset = 62;
 156          byte playerStatus = 0; // 0 idle, 1 right, 2 left
 157          byte quadFrameCount = 0;
 158          boolean btn1 = 0;
 159          boolean btn2 = 0;
 160          unsigned int score = 0;
 161          unsigned long lastFrame = 0;
 162          unsigned long lastBomb = 0;
 163          int bombDelay = 1500;
 164          int frameDelay = 40;
 165          byte playerStep = 2;
 166          boolean stopAnimate = 0;
 167          
 168          
 169          
 170          void resetGame(){
 171   1              byte i;
 172   1              
 173   1              ssd1306_fillscreen(0x00);
 174   1              ssd1306_char_f6x8(22, 2, "Run Dude Run");
 175   1                
 176   1              ssd1306_char_f6x8(26, 7, "Stc8 Arcade");  
 177   1              waitStart();
 178   1              delay(1000);
C51 COMPILER V9.60.7.0   MAIN                                                              05/22/2025 09:16:15 PAGE 4   

 179   1              
 180   1              ssd1306_draw_bmp(0,0,128,8,splash);
 181   1              delay(2000);
 182   1           
 183   1      
 184   1              ssd1306_fillscreen(B00000000);
 185   1      
 186   1              stopAnimate=0;
 187   1              for (i = 0; i<16; i++){
 188   2                      bombX[i] = 0;
 189   2                      bombY[i] = 0;
 190   2                      bombStatus[i] = 0;
 191   2              }
 192   1              totalBombs = 1;
 193   1              bombDelay = 1500;
 194   1              frameDelay = 40;
 195   1              score = 0;
 196   1              
 197   1      }
 198          
 199          void drawBombs(){
 200   1              byte bi,tb;
 201   1        if (lastBomb+bombDelay<millis()){
 202   2          lastBomb = millis();
 203   2           
 204   2          if (score < 10 && score > 0){
 205   3             totalBombs++; 
 206   3          }else if (score>100&&score<1000){
 207   3            bombDelay = 3000;
 208   3            if (frameDelay>0){frameDelay--;}
 209   3          }else if (score > 1000){
 210   3            if (totalBombs<maxBombs){
 211   4             totalBombs++;
 212   4            } 
 213   3          }
 214   2        }
 215   1        for (bi = 0; bi<totalBombs; bi++){
 216   2          if (bombStatus[bi] != 1){
 217   3            bombStatus[bi] = 1;
 218   3            bombX[bi]=random(0,120);
 219   3            bombY[bi]=0;
 220   3          }
 221   2        }
 222   1          
 223   1        for (tb = 0; tb < totalBombs; tb++){
 224   2          if (bombStatus[tb]==1){
 225   3                              byte offset,offset2;
 226   3             bombY[tb] ++;      if (bombY[tb]>=63){bombY[tb]=0;}  // remove later
 227   3             offset = 8- bombY[tb]%8;
 228   3             offset2 =  bombY[tb]%8;
 229   3             
 230   3            
 231   3             if (bombY[tb]>0){
 232   4                    ssd1306_setpos(bombX[tb],bombY[tb]/8);
 233   4                    ssd1306_send_data_start();
 234   4                    ssd1306_send_byte((~bomb1[7])>>offset^B11111111<<offset2);
 235   4                    ssd1306_send_byte((~bomb1[8])>>offset^B11111111<<offset2);
 236   4                    ssd1306_send_byte((~bomb1[9])>>offset^B11111111<<offset2);
 237   4                    ssd1306_send_byte((~bomb1[10])>>offset^B11111111<<offset2);
 238   4                    ssd1306_send_byte((~bomb1[11])>>offset^B11111111<<offset2);
 239   4                    ssd1306_send_byte((~bomb1[12])>>offset^B11111111<<offset2);
 240   4                    ssd1306_send_byte((~bomb1[13])>>offset^B11111111<<offset2);
C51 COMPILER V9.60.7.0   MAIN                                                              05/22/2025 09:16:15 PAGE 5   

 241   4                    ssd1306_send_data_stop();
 242   4                    
 243   4             }
 244   3             
 245   3             if (bombY[tb]>=8){
 246   4                    ssd1306_setpos(bombX[tb],bombY[tb]/8-1);
 247   4                    ssd1306_send_data_start();
 248   4                    ssd1306_send_byte((((~bomb1[0])>>offset)^B11111111<<offset2)|(~bomb1[7])<<offset2);
 249   4                    ssd1306_send_byte((((~bomb1[1])>>offset)^B11111111<<offset2)|(~bomb1[8])<<offset2);
 250   4                    ssd1306_send_byte((((~bomb1[2])>>offset)^B11111111<<offset2)|(~bomb1[9])<<offset2);
 251   4                    ssd1306_send_byte((((~bomb1[3])>>offset)^B11111111<<offset2)|(~bomb1[10])<<offset2);
 252   4                    ssd1306_send_byte((((~bomb1[4])>>offset)^B11111111<<offset2)|(~bomb1[11])<<offset2);
 253   4                    ssd1306_send_byte((((~bomb1[5])>>offset)^B11111111<<offset2)|(~bomb1[12])<<offset2);
 254   4                    ssd1306_send_byte((((~bomb1[6])>>offset)^B11111111<<offset2)|(~bomb1[13])<<offset2);
 255   4                    ssd1306_send_data_stop();      
 256   4             }
 257   3             if (bombY[tb]>=16){
 258   4                    ssd1306_setpos(bombX[tb],bombY[tb]/8-2);
 259   4                    ssd1306_send_data_start();
 260   4                    ssd1306_send_byte((~bomb1[0])<<offset2);
 261   4                    ssd1306_send_byte((~bomb1[1])<<offset2);
 262   4                    ssd1306_send_byte((~bomb1[2])<<offset2);
 263   4                    ssd1306_send_byte((~bomb1[3])<<offset2);
 264   4                    ssd1306_send_byte((~bomb1[4])<<offset2);
 265   4                    ssd1306_send_byte((~bomb1[5])<<offset2);
 266   4                    ssd1306_send_byte((~bomb1[6])<<offset2);
 267   4                    ssd1306_send_data_stop();
 268   4             }
 269   3             if (bombY[tb]>56 && (playerOffset<bombX[tb]+7&&playerOffset+5>bombX[tb])){
 270   4               
 271   4               stopAnimate=1;
 272   4               
 273   4             }
 274   3             
 275   3             if (bombY[tb]>59){
 276   4      //              analogWrite(1,127);
 277   4                    ssd1306_setpos(bombX[tb],bombY[tb]/8-1);
 278   4                    ssd1306_send_data_start();
 279   4                    ssd1306_send_byte(B00000000);
 280   4                    ssd1306_send_byte(B00000000);
 281   4                    ssd1306_send_byte(B00000000);
 282   4                    ssd1306_send_byte(B00000000);
 283   4                    ssd1306_send_byte(B00000000);
 284   4                    ssd1306_send_byte(B00000000);
 285   4                    ssd1306_send_byte(B00000000);
 286   4                    ssd1306_send_data_stop();
 287   4               
 288   4                    ssd1306_setpos(bombX[tb],7);
 289   4                    ssd1306_send_data_start();
 290   4                    ssd1306_send_byte(B00111100);
 291   4                    ssd1306_send_byte(B01011010);
 292   4                    ssd1306_send_byte(B10100101);
 293   4                    ssd1306_send_byte(B01010101);
 294   4                    ssd1306_send_byte(B10101010);
 295   4                    ssd1306_send_byte(B01011010);
 296   4                    ssd1306_send_byte(B00111100);
 297   4                    ssd1306_send_data_stop();
 298   4             }
 299   3             if (bombY[tb]==62){
 300   4                    ssd1306_setpos(bombX[tb],bombY[tb]/8);
 301   4                    ssd1306_send_data_start();
 302   4                    ssd1306_send_byte(B00000000);
C51 COMPILER V9.60.7.0   MAIN                                                              05/22/2025 09:16:15 PAGE 6   

 303   4                    ssd1306_send_byte(B00000000);
 304   4                    ssd1306_send_byte(B00000000);
 305   4                    ssd1306_send_byte(B00000000);
 306   4                    ssd1306_send_byte(B00000000);
 307   4                    ssd1306_send_byte(B00000000);
 308   4                    ssd1306_send_byte(B00000000);
 309   4                    ssd1306_send_data_stop();
 310   4                    
 311   4                    bombStatus[tb] = 0;
 312   4                    score++;
 313   4      //              digitalWrite(1,0);
 314   4             }
 315   3             
 316   3          }else {
 317   3            
 318   3          }
 319   2        }
 320   1        //delay(1000);
 321   1      }
 322          void drawPlayer(){
 323   1        ssd1306_setpos(playerOffset-5,7);
 324   1        ssd1306_send_data_start();
 325   1        ssd1306_send_byte(B00000000); // erase player's previous position
 326   1        ssd1306_send_byte(B00000000);
 327   1        ssd1306_send_byte(B00000000);
 328   1        ssd1306_send_byte(B00000000);
 329   1        ssd1306_send_byte(B00000000);
 330   1        ssd1306_send_byte(B00000000);
 331   1        ssd1306_send_byte(B00000000);
 332   1        ssd1306_send_byte(B00000000);
 333   1        ssd1306_send_byte(B00000000);
 334   1        ssd1306_send_byte(B00000000);
 335   1        ssd1306_send_byte(B00000000);
 336   1        ssd1306_send_byte(B00000000);
 337   1        ssd1306_send_byte(B00000000);
 338   1        ssd1306_send_byte(B00000000);
 339   1        ssd1306_send_byte(B00000000);
 340   1        ssd1306_send_data_stop();
 341   1        if (playerStatus==1&&quadFrameCount<2){
 342   2          ssd1306_draw_bmp(playerOffset,7,playerOffset+5,8,playerRight1);
 343   2        }else if (playerStatus==1){
 344   2          ssd1306_draw_bmp(playerOffset,7,playerOffset+5,8,playerRight2);
 345   2        }else if (playerStatus==2&&quadFrameCount<2){
 346   2          ssd1306_draw_bmp(playerOffset,7,playerOffset+5,8,playerLeft1);
 347   2        }else if (playerStatus==2){
 348   2          ssd1306_draw_bmp(playerOffset,7,playerOffset+5,8,playerLeft2);
 349   2        }else if (quadFrameCount<2){
 350   2          ssd1306_draw_bmp(playerOffset,7,playerOffset+5,8,playerIdle1);
 351   2        }else {
 352   2          ssd1306_draw_bmp(playerOffset,7,playerOffset+5,8,playerIdle2); 
 353   2        }
 354   1      }
 355          
 356          
 357          
 358          
 359          
 360          void setup() {
 361   1              byte tb;
 362   1              ssd1306_init();
 363   1              activeMillis = millis();
 364   1        
C51 COMPILER V9.60.7.0   MAIN                                                              05/22/2025 09:16:15 PAGE 7   

 365   1        resetGame();
 366   1        
 367   1        for (tb = 1; tb <= totalBombs; tb++){
 368   2         bombY[tb]=random(0,64); 
 369   2        }
 370   1              
 371   1        
 372   1      }
 373          
 374          
 375          void loop() { 
 376   1      #if 1
 377   1        
 378   1          char charBuf[4];  
 379   1              
 380   1      //      ssd1306_fillscreen(0x00);
 381   1      //      ssd1306_char_f6x8(16, 2, "B R E A K O U T");
 382   1      //      ssd1306_char_f6x8(20, 4, "press A to play");
 383   1      //      delay(200); 
 384   1      //      ssd1306_char_f6x8(22, 7, "Tiny Stc8g"); 
 385   1      //      beep(200,600);          beep(300,200);          beep(400,300);
 386   1      //      delay(2000);
 387   1              
 388   1       
 389   1      
 390   1                      
 391   1      
 392   1              
 393   1                      
 394   1      //              lastFrame=millis();
 395   1      //    ssd1306_draw_bmp(playerOffset,7,playerOffset+5,8,playerRight1);
 396   1           if (frameDelay+lastFrame < millis()){
 397   2                    lastFrame = millis();
 398   2                    playerStatus = 0;
 399   2                    if (RIGHT==1||btn1==1){
 400   3                      playerStatus = 2;
 401   3                      if (playerOffset >0){
 402   4                         playerOffset -=playerStep;
 403   4                      }
 404   3                      btn1 = 0;
 405   3                    }
 406   2                    if (LEFT==1||btn2==1){
 407   3                      playerStatus = 1;
 408   3                      if (playerOffset < 121){
 409   4                        playerOffset +=playerStep;
 410   4                      }
 411   3                      btn2 = 0;
 412   3                    }
 413   2                    
 414   2                    
 415   2                    drawPlayer();
 416   2                    drawBombs();
 417   2                    quadFrameCount++;
 418   2                    if (quadFrameCount>=3){quadFrameCount = 0;}   
 419   2                        
 420   2                        
 421   2                        
 422   2                        //ssd1306_draw_bmp(14,0,21,2,bomb1);
 423   2                       // delay(150);
 424   2                        
 425   2                       //ssd1306_draw_bmp(22,2,28,4,bottle1);
 426   2                        //delay(150);
C51 COMPILER V9.60.7.0   MAIN                                                              05/22/2025 09:16:15 PAGE 8   

 427   2                   //     
 428   2                   
 429   2                   // display score
 430   2                      if (stopAnimate==1){
 431   3                                                                              int i;
 432   3                       int topScore = 0;
 433   3                          topScore = topScore << 8;
 434   3                          topScore = 0;
 435   3                          
 436   3                          if (score>topScore){topScore = score; }
 437   3      
 438   3                          ssd1306_char_f6x8(32, 3, "Game Over");
 439   3                          ssd1306_char_f6x8(32, 5, "score:");
 440   3                          sprintf(charBuf,"%d",score);
 441   3                          ssd1306_char_f6x8(70, 5, charBuf);
 442   3                          ssd1306_char_f6x8(32, 6, "top score:");
 443   3                          sprintf(charBuf,"%d",score);
 444   3                          ssd1306_char_f6x8(90, 6, charBuf);
 445   3                          for (i = 0; i<1000; i++){
 446   4                            beep(1,random(0,i*2));
 447   4                          }
 448   3                          delay(2000);
 449   3                         
 450   3                          ssd1306_fillscreen(B00000000);
 451   3                          resetGame();
 452   3                           
 453   3                      }
 454   2                      
 455   2                                                                      sprintf(charBuf,"%d",score);
 456   2                      
 457   2                      ssd1306_char_f6x8(92, 0, charBuf);
 458   2                      
 459   2                     if (activeMillis+30000<millis()||stopAnimate==1){
 460   3      
 461   3                     }
 462   2                     
 463   2              
 464   2           }  
 465   1      //               while((millis()-lastFrame)<30);
 466   1                   //     
 467   1                     
 468   1              
 469   1      #endif
 470   1      }
 471          
 472          
 473          void main() { 
 474   1      
 475   1            
 476   1              setup();
 477   1              
 478   1              
 479   1      
 480   1      
 481   1              while (1) {
 482   2                      
 483   2                      loop();
 484   2                      
 485   2              }
 486   1                      
 487   1      }
 488                       
C51 COMPILER V9.60.7.0   MAIN                                                              05/22/2025 09:16:15 PAGE 9   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2844    ----
   CONSTANT SIZE    =   1136    ----
   XDATA SIZE       =     75      13
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
