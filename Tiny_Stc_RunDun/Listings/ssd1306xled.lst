C51 COMPILER V9.60.7.0   SSD1306XLED                                                       05/22/2025 09:16:15 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE SSD1306XLED
OBJECT MODULE PLACED IN .\Objects\ssd1306xled.obj
COMPILER INVOKED BY: D:\Program Files\Keil_v5\C51\BIN\C51.EXE ssd1306xled.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTE
                    -XTEND PRINT(.\Listings\ssd1306xled.lst) OBJECT(.\Objects\ssd1306xled.obj)

line level    source

   1          #include <STC8G.H>
   2          
   3          #include "ssd1306xled.h"
   4          #include "font6x8.h"
   5          #include <stdlib.h>
   6          #include <intrins.h>
   7          #define FOSC 24000000UL
   8          #define T1M (65536-FOSC/1000)
   9          unsigned long timeCnt;
  10          
  11          
  12          void waitStart()
  13          {
  14   1        unsigned long waitFrame=timeCnt;
  15   1        while(ACT==1)
  16   1        {
  17   2                if(timeCnt-waitFrame>2000){
  18   3                        waitFrame=timeCnt;
  19   3                }
  20   2                else if(timeCnt-waitFrame>1000) {
  21   3                        ssd1306_char_f6x8(20, 4, "press A start");
  22   3                        
  23   3                }
  24   2                else{
  25   3                 ssd1306_char_f6x8(20, 4, "             ");
  26   3                 
  27   3                }
  28   2                
  29   2        }
  30   1      }
  31          
  32          void beep(int bCount,int bDelay){
  33   1              int i,i2;
  34   1        for (i = 0; i<=bCount; i++)
  35   1              {
  36   2                      SPEAKER=1;
  37   2                      for(i2=0; i2<bDelay; i2++)
  38   2                {
  39   3                     _nop_();_nop_();
  40   3                      }
  41   2                     
  42   2                SPEAKER=0;
  43   2                for(i2=0; i2<bDelay; i2++)
  44   2                {
  45   3                    _nop_();_nop_();
  46   3                }
  47   2              }
  48   1      }
  49          
  50          void Timer0_Isr(void) interrupt 1
  51          {
  52   1              timeCnt++;
  53   1      }
  54          
C51 COMPILER V9.60.7.0   SSD1306XLED                                                       05/22/2025 09:16:15 PAGE 2   

  55          void Timer0_Init(void)          //1毫秒@24.000MHz
  56          {
  57   1              AUXR |= 0x80;                   //定时器时钟1T模式
  58   1              TMOD &= 0xF0;                   //设置定时器模式
  59   1              TL0 = T1M;                              //设置定时初始值
  60   1              TH0 = T1M>>8;                           //设置定时初始值
  61   1              TF0 = 0;                                //清除TF0标志
  62   1              TR0 = 1;                                //定时器0开始计时
  63   1              ET0 = 1;                                //使能定时器0中断
  64   1              EA=1;
  65   1      }
  66          
  67          unsigned long millis()
  68          {
  69   1              return timeCnt;
  70   1      }
  71          
  72          int random(int a,int b)
  73          {
  74   1              return(rand()%b-a);
  75   1      }
  76          
  77          void delay(unsigned int ms)
  78          {
  79   1              unsigned long startCnt=millis();
  80   1              while((timeCnt-startCnt)<ms);
  81   1      }
  82          
  83          void Wait()
  84          {
  85   1              while(!(I2CMSST & 0X40));
  86   1              I2CMSST &= ~0X40;
  87   1      }
  88          
  89          void IIC_Start(){
  90   1              I2CMSCR=0X01;
  91   1              Wait();
  92   1      }
  93          
  94                  
  95          void IIC_Ack(){
  96   1              I2CMSCR=0X03;
  97   1              Wait();
  98   1      }
  99          
 100          void IIC_Stop(){
 101   1              I2CMSCR=0X06;
 102   1              Wait();
 103   1      }
 104          
 105          
 106          void IIC_WriteByte(uint8_t IIC_Data){
 107   1              I2CTXD=IIC_Data;
 108   1              I2CMSCR=0X02;
 109   1              Wait();
 110   1              
 111   1              
 112   1      }
 113          
 114          
 115          
 116          void IIC_Write(uint8_t DevAddr,uint8_t Cmd,uint8_t dat){
C51 COMPILER V9.60.7.0   SSD1306XLED                                                       05/22/2025 09:16:15 PAGE 3   

 117   1              IIC_Start();
 118   1              IIC_WriteByte(DevAddr);
 119   1              IIC_Ack();
 120   1              IIC_WriteByte(Cmd);
 121   1              IIC_Ack();
 122   1              
 123   1              IIC_WriteByte(dat);
 124   1              IIC_Ack();
 125   1              
 126   1              IIC_Stop();
 127   1      }
 128          
 129          
 130          
 131          void ssd1306_init(void){
 132   1              P3M0=0X00;
 133   1              P3M1=0X00;
 134   1              P5M0=0X00;
 135   1              P5M1=0X00;
 136   1              P_SW2 =0X80;
 137   1        I2CCFG=0Xc1;
 138   1      //      I2CCFG=0Xe0;
 139   1              I2CMSST=0X00;
 140   1              Timer0_Init();
 141   1              ssd1306_send_command(0xAE); // display off
 142   1              ssd1306_send_command(0x00); // Set Memory Addressing Mode
 143   1              ssd1306_send_command(0x10); // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressi
             -ng Mode (RESET);11,Invalid
 144   1              ssd1306_send_command(0x40); // Set Page Start Address for Page Addressing Mode,0-7
 145   1              ssd1306_send_command(0x81); // Set COM Output Scan Direction
 146   1              ssd1306_send_command(0xCF); // ---set low column address
 147   1              ssd1306_send_command(0xA1); // ---set high column address
 148   1              ssd1306_send_command(0xC8); // --set start line address
 149   1              ssd1306_send_command(0xA6); // --set contrast control register
 150   1              ssd1306_send_command(0xA8);
 151   1              ssd1306_send_command(0x3F); // --set segment re-map 0 to 127
 152   1              ssd1306_send_command(0xD3); // --set normal display
 153   1              ssd1306_send_command(0x00); // --set multiplex ratio(1 to 64)
 154   1              ssd1306_send_command(0xD5); // 
 155   1              ssd1306_send_command(0x80); // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 156   1              ssd1306_send_command(0xD9); // -set display offset
 157   1              ssd1306_send_command(0xF1); // -not offset
 158   1              ssd1306_send_command(0xDA); // --set display clock divide ratio/oscillator frequency
 159   1              ssd1306_send_command(0x12); // --set divide ratio
 160   1              ssd1306_send_command(0xDB); // --set pre-charge period
 161   1              ssd1306_send_command(0x40); // 
 162   1              ssd1306_send_command(0x20); // --set com pins hardware configuration
 163   1              ssd1306_send_command(0x02);
 164   1              ssd1306_send_command(0x8D); // --set vcomh
 165   1              ssd1306_send_command(0x14); // 0x20,0.77xVcc
 166   1              ssd1306_send_command(0xA4); // --set DC-DC enable
 167   1              ssd1306_send_command(0xA6); // 
 168   1              ssd1306_send_command(0xAF); // --turn on oled panel 
 169   1      }
 170          
 171          void ssd1306_xfer_start(void){
 172   1              IIC_Start();
 173   1      }
 174          
 175          void ssd1306_xfer_stop(void){
 176   1              IIC_Stop();
 177   1      }
C51 COMPILER V9.60.7.0   SSD1306XLED                                                       05/22/2025 09:16:15 PAGE 4   

 178          
 179          void ssd1306_send_byte(uint8_t b){
 180   1              IIC_WriteByte(b);
 181   1              IIC_Ack();
 182   1      }
 183          
 184          void ssd1306_send_command(uint8_t command){
 185   1              ssd1306_xfer_start();
 186   1              ssd1306_send_byte(SSD1306_SA);  // Slave address, SA0=0
 187   1              ssd1306_send_byte(0x00);        // write command
 188   1              ssd1306_send_byte(command);
 189   1              ssd1306_xfer_stop();
 190   1      }
 191          
 192          void ssd1306_send_data_start(void){
 193   1              ssd1306_xfer_start();
 194   1              ssd1306_send_byte(SSD1306_SA);
 195   1              ssd1306_send_byte(0x40);        //write data
 196   1      }
 197          
 198          void ssd1306_send_data_stop(void){
 199   1              ssd1306_xfer_stop();
 200   1      }
 201          
 202          void ssd1306_setpos(uint8_t x, uint8_t y)
 203          {
 204   1              ssd1306_xfer_start();
 205   1              ssd1306_send_byte(SSD1306_SA);  //Slave address,SA0=0
 206   1              ssd1306_send_byte(0x00);        //write command
 207   1      
 208   1              ssd1306_send_byte(0xb0+y);
 209   1              ssd1306_send_byte(((x&0xf0)>>4)|0x10); // |0x10
 210   1              ssd1306_send_byte((x&0x0f)|0x01); // |0x01
 211   1      
 212   1              ssd1306_xfer_stop();
 213   1      }
 214          
 215          void ssd1306_fillscreen(uint8_t fill_Data){
 216   1              uint8_t m,n;
 217   1              for(m=0;m<8;m++)
 218   1              {
 219   2                      ssd1306_send_command(0xb0+m);   //page0-page1
 220   2                      ssd1306_send_command(0x00);             //low column start address
 221   2                      ssd1306_send_command(0x10);             //high column start address
 222   2                      ssd1306_send_data_start();
 223   2                      for(n=0;n<128;n++)
 224   2                      {
 225   3                              ssd1306_send_byte(fill_Data);
 226   3                      }
 227   2                      ssd1306_send_data_stop();
 228   2              }
 229   1      }
 230          
 231          
 232          
 233          void ssd1306_char_f6x8(uint8_t x, uint8_t y, const char ch[]){
 234   1        uint8_t c,i,j=0;
 235   1        while(ch[j] != '\0')
 236   1        {
 237   2          c = ch[j] - 32;
 238   2          if (c >0) c = c - 12;
 239   2          if (c >15) c = c - 6;
C51 COMPILER V9.60.7.0   SSD1306XLED                                                       05/22/2025 09:16:15 PAGE 5   

 240   2          if (c>40) c=c-9;
 241   2          if(x>126)
 242   2          {
 243   3            x=0;
 244   3            y++;
 245   3          }
 246   2          ssd1306_setpos(x,y);
 247   2          ssd1306_send_data_start();
 248   2          for(i=0;i<6;i++)
 249   2          {
 250   3            ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c*6+i]));
 251   3          }
 252   2          ssd1306_send_data_stop();
 253   2          x += 6;
 254   2          j++;
 255   2        }
 256   1      }
 257          
 258          void ssd1306_draw_bmp(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, const uint8_t bitmap[])
 259          {
 260   1              uint16_t j = 0;
 261   1              uint8_t y;
 262   1              if (y1 % 8 == 0) y = y1 / 8;
 263   1              else y = y1 / 8 + 1;
 264   1              for (y = y0; y < y1; y++)
 265   1              {
 266   2                      uint8_t x;
 267   2                      ssd1306_setpos(x0,y);
 268   2                      ssd1306_send_data_start();
 269   2                      for (x = x0; x < x1; x++)
 270   2                      {
 271   3                              ssd1306_send_byte(~pgm_read_byte(&bitmap[j++]));
 272   3                      }
 273   2                      ssd1306_send_data_stop();
 274   2              }
 275   1      }
 276          
 277          uint8_t pgm_read_byte(uint8_t *p)
 278          {
 279   1              return *p;
 280   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1225    ----
   CONSTANT SIZE    =    412    ----
   XDATA SIZE       =      4      37
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
